{"version":3,"sources":["webpack:///./src/components/ApplicationForm.js","webpack:///./src/pages/apply.js","webpack:///./src/components/Error.js"],"names":["RequiredAsterisk","styled","span","CenteredForm","Form","setFileValidity","fileUpload","files","length","setCustomValidity","swal","size","value","ApplicationForm","_initFirebase","state","applicationFormConfig","generalSettings","loading","validated","sending","submitted","alreadyApplied","errorMsg","loadData","loadApplicationFormConfig","props","firebase","get","then","snapshot","data","catch","setState","loadAlreadyApplied","user","context","uid","console","error","loadGeneralSettings","Promise","all","values","applied","componentDidMount","this","componentDidUpdate","prevProps","window","bsCustomFileInput","init","render","applicationsOpen","flexdirection","style","justifyContent","alignItems","maxWidth","semester","href","onSubmit","event","preventDefault","form","currentTarget","fileUploads","Array","from","querySelectorAll","forEach","checkValidity","stopPropagation","firstName","email","inputs","questions","roles","applicant","responses","map","inputId","id","parseInt","split","find","q","name","order","type","uploadFiles","resolve","reject","pop","file","put","ref","getDownloadURL","fileURLs","concat","uploadApplicationData","application","set","setApplied","update","sendReceipt","sendApplicationReceipt","successMessage","alignSelf","noValidate","color","sort","a","b","question","questionComponent","Control","required","as","rows","File","label","custom","accept","onChange","e","target","defaultValue","Row","width","key","Group","controlId","Label","renderQuestion","disabled","Component","contextType","AuthUserContext","compose","withAuthorization","isLoggedIn","withFirebase","ApplyPage","location","Error"],"mappings":"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","file":"component---src-pages-apply-js-8d3c23c1d2a692b80cd8.js","sourcesContent":["import React, { Component } from \"react\";\nimport styled from \"styled-components\";\nimport { compose } from \"recompose\";\nimport swal from \"@sweetalert/with-react\";\n\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\n\nimport {\n  AuthUserContext,\n  withFirebase,\n  withAuthorization,\n} from \"upe-react-components\";\n\nimport { isLoggedIn } from \"../util/conditions\";\nimport Loader from \"./Loader\";\nimport Error from \"./Error\";\nimport Logo from \"./Logo\";\nimport { Container } from \"../styles/global\";\n\nexport const RequiredAsterisk = styled.span`\n  color: red;\n\n  &:after {\n    content: \"*\";\n  }\n`;\n\nconst CenteredForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  max-width: 500px;\n  margin: 0 auto;\n  margin-bottom: 25px;\n`;\n\n// use sweetalert here since its non blocking\nconst setFileValidity = (fileUpload) => {\n  if (fileUpload.files.length === 0) {\n    fileUpload.setCustomValidity(\"You must upload a file!\");\n    swal(\"Uh oh!\", \"You must upload a file!\", \"error\");\n  } else if (fileUpload.files.length > 1) {\n    fileUpload.setCustomValidity(\"You can only upload 1 file!\");\n    swal(\"Uh oh!\", \"You can only upload 1 file!\", \"error\");\n  } else if (fileUpload.files[0].size > 1048576) {\n    fileUpload.setCustomValidity(\"Max file size is 1MB!\");\n    fileUpload.value = \"\";\n    swal(\"Uh oh!\", \"Max file size is 1MB!\", \"error\");\n  } else {\n    fileUpload.setCustomValidity(\"\");\n  }\n};\n\nclass ApplicationForm extends Component {\n  _initFirebase = false;\n  state = {\n    applicationFormConfig: null,\n    generalSettings: null,\n    loading: true,\n    validated: false,\n    sending: false,\n    submitted: false,\n    alreadyApplied: false,\n    errorMsg: \"\",\n  };\n  static contextType = AuthUserContext;\n\n  componentDidMount() {\n    if (this.props.firebase && !this._initFirebase) this.loadData();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.firebase && !this._initFirebase) this.loadData();\n    if (typeof window !== \"undefined\") {\n      import(\"bs-custom-file-input\").then((bsCustomFileInput) => {\n        bsCustomFileInput.init();\n      });\n    }\n  }\n\n  loadData = async () => {\n    this._initFirebase = true;\n    const loadApplicationFormConfig = this.props.firebase\n      .applicationFormConfig()\n      .get()\n      .then((snapshot) => snapshot.data())\n      .catch(() =>\n        this.setState({\n          errorMsg: \"Application Form Config doesn't exist!\",\n          loading: false,\n        })\n      );\n    const loadAlreadyApplied = this.props.firebase\n      .user(this.context.uid)\n      .get()\n      .then((snapshot) => snapshot.data())\n      .catch(console.error);\n    const loadGeneralSettings = this.props.firebase\n      .generalSettings()\n      .get()\n      .then((snapshot) => snapshot.data())\n      .catch(() =>\n        this.setState({\n          errorMsg: \"General settings doesn't exist!\",\n          loading: false,\n        })\n      );\n\n    Promise.all([\n      loadApplicationFormConfig,\n      loadAlreadyApplied,\n      loadGeneralSettings,\n    ]).then((values) =>\n      this.setState({\n        loading: false,\n        applicationFormConfig: values[0],\n        alreadyApplied: values[1].applied,\n        generalSettings: values[2],\n      })\n    );\n  };\n\n  render() {\n    const {\n      loading,\n      errorMsg,\n      submitted,\n      validated,\n      applicationFormConfig,\n      sending,\n      alreadyApplied,\n      generalSettings,\n    } = this.state;\n\n    if (loading) return <Loader />;\n\n    if (!generalSettings.applicationsOpen)\n      return (\n        <Container\n          flexdirection=\"column\"\n          style={{\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            maxWidth: 700,\n          }}\n        >\n          <Logo size=\"medium\" />\n          <h1>Applications are closed!</h1>\n          <p>\n            Unfortunately, the application for the{\" \"}\n            {applicationFormConfig.semester} season has closed. If you're\n            interesting in joining BU UPE, please come back next semester and\n            apply, we'd love to have you! In the meantime, feel free to check\n            out the public events on{\" \"}\n            <a href=\"https://upe.bu.edu/events\">our calendar</a>.\n          </p>\n        </Container>\n      );\n\n    const onSubmit = async (event) => {\n      this.setState({ sending: true });\n      event.preventDefault();\n      const form = event.currentTarget;\n      const fileUploads = Array.from(\n        form.querySelectorAll(\".custom-file-input\")\n      );\n      fileUploads.forEach((fileUpload) => setFileValidity(fileUpload));\n\n      if (form.checkValidity() === false) {\n        event.stopPropagation();\n      } else {\n        const inputs = Array.from(form.querySelectorAll(\".form-control\"));\n        const { semester, questions } = this.state.applicationFormConfig;\n        const { uid, roles } = this.context;\n        roles.applicant = true;\n\n        let firstName, email;\n        let responses = inputs.map(({ id: inputId, value }) => {\n          const id = parseInt(inputId);\n\n          if (id === 1) firstName = value.split(\" \")[0];\n          else if (id === 2) email = value;\n\n          const { name, order, type } = questions.find((q) => q.id === id);\n          return {\n            id,\n            value,\n            name,\n            order,\n            type,\n          };\n        });\n\n        const uploadFiles = fileUploads.map(\n          (fileUpload) =>\n            new Promise((resolve, reject) => {\n              const id = parseInt(fileUpload.id.split(\"-\").pop());\n              this.props.firebase\n                .file(uid, id)\n                .put(fileUpload.files[0])\n                .then((snapshot) => snapshot.ref.getDownloadURL())\n                .then((value) => {\n                  const { name, order, type } = questions.find(\n                    (q) => q.id === id\n                  );\n                  return resolve({\n                    id,\n                    value,\n                    name,\n                    order,\n                    type,\n                  });\n                });\n            })\n        );\n\n        const fileURLs = await Promise.all(uploadFiles);\n        responses = responses.concat(fileURLs);\n\n        const uploadApplicationData = this.props.firebase\n          .application(uid)\n          .set({ responses, semester });\n        const setApplied = this.props.firebase\n          .user(uid)\n          .update({ applied: true, roles });\n        const sendReceipt = this.props.firebase.sendApplicationReceipt({\n          email,\n          firstName,\n        });\n\n        await Promise.all([uploadApplicationData, setApplied, sendReceipt]);\n        this.setState({ submitted: true, sending: false });\n      }\n\n      this.setState({\n        validated: true,\n      });\n    };\n\n    const successMessage = (\n      <Container flexdirection=\"column\">\n        <div style={{ alignSelf: \"center\" }}>\n          <Logo size=\"medium\" />\n        </div>\n\n        <h1>Application Submitted!</h1>\n        <p>\n          Thank you for applying to join BU UPE. Please check your email for a\n          confirmation of your submission. Further details, such as interview\n          timeslots, will be prompted via email and can be entered in this\n          application. If you'd like to edit your submission, simply refresh\n          this page and re-apply.\n        </p>\n      </Container>\n    );\n\n    if (errorMsg) return <Error error={errorMsg} />;\n\n    if (submitted) return successMessage;\n\n    const renderQuestion = (question) => {\n      let questionComponent;\n      if (question.type === \"textarea\") {\n        questionComponent = (\n          <Form.Control required={question.required} as=\"textarea\" rows=\"3\" />\n        );\n      } else if (question.type === \"file\") {\n        questionComponent = (\n          <Form.File\n            id={`custom-file-${question.id}`}\n            label=\"Upload file\"\n            custom\n            accept=\".pdf\"\n            onChange={(e) => setFileValidity(e.target)}\n          />\n        );\n      } else {\n        let defaultValue = \"\";\n        // eslint-disable-next-line default-case\n        switch (question.id) {\n          case 1:\n            defaultValue = this.context.name;\n            break;\n          case 2:\n            defaultValue = this.context.email;\n            break;\n        }\n        questionComponent = (\n          <Form.Control\n            required={question.required}\n            type={question.type}\n            defaultValue={defaultValue}\n          />\n        );\n      }\n\n      return (\n        <Form.Row style={{ width: \"100%\" }} key={question.id}>\n          <Form.Group controlId={question.id} style={{ width: \"100%\" }}>\n            <Form.Label>\n              {question.name} {question.required && <RequiredAsterisk />}\n            </Form.Label>\n            {questionComponent}\n          </Form.Group>\n        </Form.Row>\n      );\n    };\n\n    // use auth user context here, if user has already applied dont let them apply again (alternatively, just let them know they've applied already and further applications will overwrite previous ones)\n    return (\n      <Container flexdirection=\"column\">\n        <CenteredForm noValidate validated={validated} onSubmit={onSubmit}>\n          <Logo size=\"medium\" />\n          <h1>Apply to BU UPE</h1>\n          {/* maybe this message here should be configurable as well? */}\n          <p>\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras\n            fringilla, dui vitae maximus luctus, magna urna convallis purus,\n            condimentum ullamcorper velit dui eu dolor. Pellentesque et\n            tincidunt tellus. Fusce venenatis magna sed elit bibendum, sed\n            scelerisque augue placerat. Vestibulum nec mi efficitur, posuere\n            nisl at, pretium ex. Quisque quam dui, pulvinar a pellentesque eu,\n            cursus et elit. Ut volutpat imperdiet ex, id commodo nulla pretium\n            id. Proin accumsan dignissim tortor, id pulvinar urna euismod ac.\n            Morbi suscipit massa id dui feugiat ultrices. Nulla ac faucibus\n            tortor, quis pharetra leo.\n          </p>\n\n          {alreadyApplied && (\n            <p style={{ color: \"red\" }}>\n              Look's like you've already applied! Feel free to reapply however,\n              just note that it will overwrite your previous submission.\n            </p>\n          )}\n\n          {applicationFormConfig.questions\n            .sort((a, b) => (a.order > b.order ? 1 : -1))\n            .map((question) => renderQuestion(question))}\n\n          <Button type=\"submit\" disabled={sending}>\n            {sending ? \"Submitting...\" : \"Submit\"}\n          </Button>\n        </CenteredForm>\n      </Container>\n    );\n  }\n}\n\nexport default compose(\n  withAuthorization(isLoggedIn),\n  withFirebase\n)(ApplicationForm);\n","import React from \"react\";\n\nimport Layout from \"../components/Layout\";\nimport ApplicationForm from \"../components/ApplicationForm\";\n\nconst ApplyPage = ({ location }) => (\n  <Layout>\n    <ApplicationForm location={location} />\n  </Layout>\n);\n\nexport default ApplyPage;\n","import React from \"react\";\nimport { Container } from \"../styles/global\";\n\nconst Error = ({ error }) => (\n  <Container flexdirection=\"column\">\n    <h1>{error}</h1>\n  </Container>\n);\n\nexport default Error;\n"],"sourceRoot":""}