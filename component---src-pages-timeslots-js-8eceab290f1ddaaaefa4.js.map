{"version":3,"sources":["webpack:///./node_modules/react-bootstrap/esm/Row.js","webpack:///./src/components/ScheduleColumn.js","webpack:///./src/pages/timeslots.js"],"names":["DEVICE_SIZES","Row","forwardRef","_ref","ref","bsPrefix","className","noGutters","_ref$as","as","Component","props","decoratedBsPrefix","sizePrefix","classes","forEach","brkPoint","cols","propValue","infix","push","createElement","apply","concat","displayName","defaultProps","ScheduleColumn","date","timeslotLength","useState","selectedSlots","setSelectedSlots","slots","Array","from","_","i","slotsPerTimeslot","dateFromSlot","slot","hours","Math","floor","minutes","Date","getFullYear","getMonth","getDate","formatTime","getHours","toString","padStart","getMinutes","handleSelect","hasOwnProperty","newSlots","start","end","pos","length","validateSlot","console","error","Col","toDateString","map","getPositions","isSelected","isTop","isMiddle","includes","isBottom","generateSlotStyle","padding","cursor","display","justifyContent","borderLeft","borderRight","borderTop","borderBottom","background","SlotBase","children","style","onClick","key","AuthorizedTimeslots","compose","withAuthorization","isLoggedIn","withFirebase","firebase","settings","setSettings","loading","setLoading","setError","authUser","useContext","AuthUserContext","useEffect","loadSettings","doc","generalSettings","get","exists","data","timeslotDays","day","toDate","Loader","flexdirection","timeslotsOpen","timeslotsOpenForApplicants","roles","applicant","location","Layout"],"mappings":"8FAAA,kFAKIA,EAAe,CAAC,KAAM,KAAM,KAAM,KAAM,MAIxCC,EAAM,IAAMC,YAAW,SAAUC,EAAMC,GACzC,IAAIC,EAAWF,EAAKE,SAChBC,EAAYH,EAAKG,UACjBC,EAAYJ,EAAKI,UACjBC,EAAUL,EAAKM,GACfC,OAAwB,IAAZF,EAAqB,MAAQA,EACzCG,EAAQ,YAA8BR,EAAM,CAAC,WAAY,YAAa,YAAa,OAEnFS,EAAoB,YAAmBP,EAAU,OACjDQ,EAAaD,EAAoB,QACjCE,EAAU,GAed,OAdAd,EAAae,SAAQ,SAAUC,GAC7B,IAEIC,EAFAC,EAAYP,EAAMK,UACfL,EAAMK,GASb,IAAIG,EAAqB,OAAbH,EAAoB,IAAMA,EAAW,GACrC,OANVC,EADe,MAAbC,GAA0C,iBAAdA,EACvBA,EAAUD,KAEVC,IAISJ,EAAQM,KAAK,GAAKP,EAAaM,EAAQ,IAAMF,MAE7C,IAAMI,cAAcX,EAAW,YAAS,CAC1DN,IAAKA,GACJO,EAAO,CACRL,UAAW,IAAWgB,WAAM,EAAQ,CAAChB,EAAWM,EAAmBL,GAAa,cAAcgB,OAAOT,UAGzGb,EAAIuB,YAAc,MAClBvB,EAAIwB,aAnCe,CACjBlB,WAAW,GAmCE,O,kKC2IAmB,EAhLQ,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,eAAqB,EAETC,mBAAS,IAA5CC,EAF4C,KAE7BC,EAF6B,KAO7CC,EAAQC,MAAMC,KAAKD,MADR,KACyB,SAACE,EAAGC,GAAJ,OAAc,GAAJA,KAC9CC,EAAmBT,EAAiB,GAoBpCU,EAAe,SAACC,GACpB,IAAMC,EAzBU,EAyBUC,KAAKC,MAAMH,EAAO,IACtCI,EAAUJ,EAAO,GACvB,OAAO,IAAIK,KACTjB,EAAKkB,cACLlB,EAAKmB,WACLnB,EAAKoB,UACLP,EACAG,IAKEK,EAAa,SAACrB,GAClB,IAAIa,EAAQb,EAAKsB,WAAa,GAI9B,OAHc,IAAVT,IAAaA,EAAQ,KACzBA,EAAQA,EAAMU,WAAWC,SAAS,EAAG,MAErC,IADgBxB,EAAKyB,aAAaF,WAAWC,SAAS,EAAG,KACzD,KAA8BxB,EAAKsB,YAAc,GAAK,KAAO,OAGzDI,EAAe,SAACd,EAAMH,GAe1B,GAAIN,EAAcwB,eAAef,GAAO,CAKtC,IAHA,IAAMgB,EAAQ,iBAAQzB,GAChB0B,EAAQD,EAAShB,GAAM,GACvBkB,EAAMF,EAAShB,GAAM,GAClBmB,EAAMF,EAAOE,GAAOD,EAAKC,GAAO,UAChCH,EAASG,GAElB,OAAO3B,EAAiBwB,GACnB,GAvBc,SAAChB,EAAMH,GAE1B,GAAIA,EAAIC,EAAmBL,EAAM2B,OAAQ,OAAO,EAIhD,IADA,IAAMF,EAAMlB,EAAOX,EACV8B,EAAMnB,EAAMmB,EAAMD,EAAKC,GAAO,GACrC,GAAI5B,EAAcwB,eAAeI,GAAM,OAAO,EAIhD,OAAO,EAYEE,CAAarB,EAAMH,GAAI,CAIhC,IAFA,IAAMmB,EAAQ,iBAAQzB,GAChB2B,EAAMlB,EAAOX,EAAiB,GAC3B8B,EAAMnB,EAAMmB,GAAOD,EAAKC,GAAO,GACtCH,EAASG,GAAO,CAACnB,EAAMkB,GAEzB,OAAO1B,EAAiBwB,GAI1BM,QAAQC,MAAM,oBAoFhB,OACE,kBAACC,EAAA,EAAD,KACE,gCAASpC,EAAKqC,gBACbhC,EAAMiC,KApFQ,SAAC1B,EAAMH,GACxB,IAAM8B,EAAe,SAAC3B,GACpB,IAAM4B,EAAarC,EAAcwB,eAAef,GAIhD,MAAO,CACL4B,aACAC,MALYD,GAAc5B,IAAST,EAAcS,GAAM,GAMvD8B,SALeF,IAAerC,EAAcS,GAAM+B,SAAS/B,GAM3DgC,SALeJ,GAAc5B,IAAST,EAAcS,GAAM,KASxDiC,EAAoB,SAACjC,GACzB,IADkC,EAQI2B,EAAa3B,GAA3C6B,EAR0B,EAQ1BA,MAAOC,EARmB,EAQnBA,SAAUE,EARS,EAQTA,SAGzB,OAAO,OAAP,UAVkB,CAChBE,QAAS,GACTC,OAAQ,UACRC,QAAS,OACTC,eAAgB,iBAMlB,CAEEC,WAJkB,kBAKlBC,YALkB,kBAMlBC,UAAWR,GAAYF,EAAW,OANhB,kBAOlBW,aAAcZ,GAASC,EAAW,OAPhB,kBAQlBY,WAAYnD,EAAcwB,eAAef,GAAQ,QAAU,WA/BjC,EAmCoB2B,EAAa3B,GAAvD4B,EAnCsB,EAmCtBA,WAAYC,EAnCU,EAmCVA,MAAOC,EAnCG,EAmCHA,SAAUE,EAnCP,EAmCOA,SAE/BW,EAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACf,yBACEC,MAAK,iBACAZ,EAAkBjC,IAEvB8C,QAAS,kBAAMhC,EAAad,EAAMH,KAEjC+C,IAIL,GAAIhB,EAAY,CACd,GAAIC,EACF,OACE,kBAACc,EAAD,CAAUI,IAAK/C,GACb,8BAAOS,EAAWV,EAAaC,MAG9B,GAAI8B,EACT,OAAO,kBAACa,EAAD,CAAUI,IAAK/C,GAAf,KACF,GAAIgC,EACT,OACE,kBAACW,EAAD,CAAUI,IAAK/C,GACb,8BAAOS,EAAWV,EAAaC,EAAO,OAM9C,OACE,yBACE6C,MAAK,iBACAZ,EAAkBjC,IAEvB+C,IAAK/C,EACL8C,QAAS,kBAAMhC,EAAad,EAAMH,KAElC,8BAAOY,EAAWV,EAAaC,KAC/B,mCACA,8BAAOS,EAAWV,EAAaC,EAAO,Y,YCnFxCgD,EAAsBC,YAC1BC,YAAkBC,KAClBC,IAF0BH,EArEV,SAAC,GAAkB,IAAhBI,EAAe,EAAfA,SAAe,EACF/D,mBAAS,MAAlCgE,EAD2B,KACjBC,EADiB,OAEJjE,oBAAS,GAAhCkE,EAF2B,KAElBC,EAFkB,OAGRnE,mBAAS,MAA5BiC,EAH2B,KAGpBmC,EAHoB,KAI5BC,EAAWC,qBAAWC,KAqB5B,GAnBAC,qBAAU,WACR,IAAMC,EAAY,8BAAG,YACnB,IAAMC,QAAYX,EAASY,kBAAkBC,MAE7C,GAAKF,EAAIG,OAEF,CACL,IAAMb,EAAWU,EAAII,OACrBd,EAASe,aAAef,EAASe,aAAa3C,KAAI,SAAC4C,GAAD,OAChDA,EAAIC,YAENhB,EAAYD,QANZI,EAAS,6BAQXD,GAAW,MAZK,qDAedJ,GAAUU,MACb,CAACV,IAEAG,EAAS,OAAO,kBAACgB,EAAA,EAAD,MACpB,GAAIjD,EACF,OACE,kBAAC,IAAD,CAAWkD,cAAc,UACvB,4BAAKlD,IA7BuB,IAkChCmD,EAIEpB,EAJFoB,cACAC,EAGErB,EAHFqB,2BACAtF,EAEEiE,EAFFjE,eACAgF,EACEf,EADFe,aAGF,OAAKK,EAODf,EAASiB,MAAMC,YAAcF,EAE7B,kBAAC,IAAD,CAAWF,cAAc,UACvB,mEAQJ,kBAAC,IAAD,CAAWA,cAAc,UACvB,gDACA,kBAAC/G,EAAA,EAAD,KACG2G,EAAa3C,KAAI,SAACtC,EAAMS,GAAP,OAChB,kBAAC,EAAD,CAAgBkD,IAAKlD,EAAGT,KAAMA,EAAMC,eAAgBA,SApBxD,kBAAC,IAAD,CAAWoF,cAAc,UACvB,iEA+BO,0BAAGK,EAAH,EAAGA,SAAH,OACb,kBAACC,EAAA,EAAD,KACE,kBAAC/B,EAAD,CAAqB8B,SAAUA","file":"component---src-pages-timeslots-js-8eceab290f1ddaaaefa4.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar DEVICE_SIZES = ['xl', 'lg', 'md', 'sm', 'xs'];\nvar defaultProps = {\n  noGutters: false\n};\nvar Row = React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      className = _ref.className,\n      noGutters = _ref.noGutters,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"className\", \"noGutters\", \"as\"]);\n\n  var decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'row');\n  var sizePrefix = decoratedBsPrefix + \"-cols\";\n  var classes = [];\n  DEVICE_SIZES.forEach(function (brkPoint) {\n    var propValue = props[brkPoint];\n    delete props[brkPoint];\n    var cols;\n\n    if (propValue != null && typeof propValue === 'object') {\n      cols = propValue.cols;\n    } else {\n      cols = propValue;\n    }\n\n    var infix = brkPoint !== 'xs' ? \"-\" + brkPoint : '';\n    if (cols != null) classes.push(\"\" + sizePrefix + infix + \"-\" + cols);\n  });\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref\n  }, props, {\n    className: classNames.apply(void 0, [className, decoratedBsPrefix, noGutters && 'no-gutters'].concat(classes))\n  }));\n});\nRow.displayName = 'Row';\nRow.defaultProps = defaultProps;\nexport default Row;","import React, { useState, useEffect } from \"react\";\n\nimport Col from \"react-bootstrap/Col\";\n\n// selecting anything other than first slot picks everything\nconst ScheduleColumn = ({ date, timeslotLength }) => {\n  // selectedSlots is an object/hashmap for performance reasons\n  const [selectedSlots, setSelectedSlots] = useState({});\n\n  const startHour = 8; // 8 am\n  const endHour = 22; // 10 pm\n  const numSlots = (endHour - startHour) * 4; // 15 min slots\n  const slots = Array.from(Array(numSlots), (_, i) => i * 15); // total 15 min slots in a day\n  const slotsPerTimeslot = timeslotLength / 15; // number of 15 min slots in an interview\n\n  // converts selectedSlots to array of dates that can be saved in firebase\n  const getTimeslots = () =>\n    Array.from(\n      // create a set of the start offsets for timeslots (removes duplicates)\n      new Set(Object.values(selectedSlots).map((timeslot) => timeslot[0]))\n    ).map(\n      (offset) =>\n        // turn start offset (which is in minutes) into a Date object\n        new Date(\n          date.getFullYear(),\n          date.getMonth(),\n          date.getDate(),\n          startHour + Math.floor(offset / 60),\n          offset % 60\n        )\n    );\n\n  // converts a start offset (slot) into a Date object\n  const dateFromSlot = (slot) => {\n    const hours = startHour + Math.floor(slot / 60);\n    const minutes = slot % 60;\n    return new Date(\n      date.getFullYear(),\n      date.getMonth(),\n      date.getDate(),\n      hours,\n      minutes\n    );\n  };\n\n  // formats a date into a AM/PM time string\n  const formatTime = (date) => {\n    let hours = date.getHours() % 12;\n    if (hours === 0) hours = 12;\n    hours = hours.toString().padStart(2, \"0\");\n    const minutes = date.getMinutes().toString().padStart(2, \"0\");\n    return `${hours}:${minutes} ${date.getHours() >= 12 ? \"PM\" : \"AM\"}`;\n  };\n\n  const handleSelect = (slot, i) => {\n    const validateSlot = (slot, i) => {\n      // if the slot will overflow past 10 PM, it's invalid\n      if (i + slotsPerTimeslot > slots.length) return false;\n\n      // if the slot will overflow into an already selected timeslot, it's invalid\n      const end = slot + timeslotLength;\n      for (let pos = slot; pos < end; pos += 15) {\n        if (selectedSlots.hasOwnProperty(pos)) return false;\n      }\n\n      // otherwise it's valid\n      return true;\n    };\n\n    if (selectedSlots.hasOwnProperty(slot)) {\n      // if slot is already selected, remove it and associated ones\n      const newSlots = { ...selectedSlots };\n      const start = newSlots[slot][0];\n      const end = newSlots[slot][1];\n      for (let pos = start; pos <= end; pos += 15) {\n        delete newSlots[pos];\n      }\n      return setSelectedSlots(newSlots);\n    } else if (validateSlot(slot, i)) {\n      // if slot isn't selected, select it and the rest in it's timeslot\n      const newSlots = { ...selectedSlots };\n      const end = slot + timeslotLength - 15;\n      for (let pos = slot; pos <= end; pos += 15) {\n        newSlots[pos] = [slot, end];\n      }\n      return setSelectedSlots(newSlots);\n    }\n\n    // otherwise show the user an error\n    console.error(\"cant pick that!\");\n  };\n\n  const renderSlot = (slot, i) => {\n    const getPositions = (slot) => {\n      const isSelected = selectedSlots.hasOwnProperty(slot);\n      const isTop = isSelected && slot === selectedSlots[slot][0];\n      const isMiddle = isSelected && !selectedSlots[slot].includes(slot);\n      const isBottom = isSelected && slot === selectedSlots[slot][1];\n      return {\n        isSelected,\n        isTop,\n        isMiddle,\n        isBottom,\n      };\n    };\n\n    const generateSlotStyle = (slot) => {\n      const baseStyle = {\n        padding: 10,\n        cursor: \"pointer\",\n        display: \"flex\",\n        justifyContent: \"space-between\",\n      };\n\n      const { isTop, isMiddle, isBottom } = getPositions(slot);\n      const borderStyle = \"1px solid black\";\n\n      return {\n        ...baseStyle,\n        borderLeft: borderStyle,\n        borderRight: borderStyle,\n        borderTop: isBottom || isMiddle ? \"none\" : borderStyle,\n        borderBottom: isTop || isMiddle ? \"none\" : borderStyle,\n        background: selectedSlots.hasOwnProperty(slot) ? \"green\" : \"white\",\n      };\n    };\n\n    const { isSelected, isTop, isMiddle, isBottom } = getPositions(slot);\n\n    const SlotBase = ({ children }) => (\n      <div\n        style={{\n          ...generateSlotStyle(slot),\n        }}\n        onClick={() => handleSelect(slot, i)}\n      >\n        {children}\n      </div>\n    );\n\n    if (isSelected) {\n      if (isTop) {\n        return (\n          <SlotBase key={slot}>\n            <span>{formatTime(dateFromSlot(slot))}</span>\n          </SlotBase>\n        );\n      } else if (isMiddle) {\n        return <SlotBase key={slot}>-</SlotBase>;\n      } else if (isBottom) {\n        return (\n          <SlotBase key={slot}>\n            <span>{formatTime(dateFromSlot(slot + 15))}</span>\n          </SlotBase>\n        );\n      }\n    }\n\n    return (\n      <div\n        style={{\n          ...generateSlotStyle(slot),\n        }}\n        key={slot}\n        onClick={() => handleSelect(slot, i)}\n      >\n        <span>{formatTime(dateFromSlot(slot))}</span>\n        <span>-</span>\n        <span>{formatTime(dateFromSlot(slot + 15))}</span>\n      </div>\n    );\n  };\n\n  return (\n    <Col>\n      <strong>{date.toDateString()}</strong>\n      {slots.map(renderSlot)}\n    </Col>\n  );\n};\n\nexport default ScheduleColumn;\n","import React, { useEffect, useState, useContext } from \"react\";\nimport { compose } from \"recompose\";\n\nimport Row from \"react-bootstrap/Row\";\n\nimport {\n  AuthUserContext,\n  withAuthorization,\n  isLoggedIn,\n} from \"../components/Session\";\nimport { withFirebase } from \"../components/Firebase\";\nimport Layout from \"../components/Layout\";\nimport Loader from \"../components/Loader\";\nimport ScheduleColumn from \"../components/ScheduleColumn\";\nimport { Container } from \"../styles/global\";\n\nconst Timeslots = ({ firebase }) => {\n  const [settings, setSettings] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const authUser = useContext(AuthUserContext);\n\n  useEffect(() => {\n    const loadSettings = async () => {\n      const doc = await firebase.generalSettings().get();\n\n      if (!doc.exists) {\n        setError(\"Failed to load timeslots!\");\n      } else {\n        const settings = doc.data();\n        settings.timeslotDays = settings.timeslotDays.map((day) =>\n          day.toDate()\n        );\n        setSettings(settings);\n      }\n      setLoading(false);\n    };\n\n    if (firebase) loadSettings();\n  }, [firebase]);\n\n  if (loading) return <Loader />;\n  if (error)\n    return (\n      <Container flexdirection=\"column\">\n        <h1>{error}</h1>\n      </Container>\n    );\n\n  const {\n    timeslotsOpen,\n    timeslotsOpenForApplicants,\n    timeslotLength,\n    timeslotDays,\n  } = settings;\n\n  if (!timeslotsOpen)\n    return (\n      <Container flexdirection=\"column\">\n        <h1>Timeslot selection is closed!</h1>\n      </Container>\n    );\n\n  if (authUser.roles.applicant && !timeslotsOpenForApplicants)\n    return (\n      <Container flexdirection=\"column\">\n        <h1>Timeslot selection isn't open yet!</h1>\n      </Container>\n    );\n\n  {\n    /* use data listener to reload whenever someone picks a slot */\n  }\n  return (\n    <Container flexdirection=\"column\">\n      <h1>Select Timeslots</h1>\n      <Row>\n        {timeslotDays.map((date, i) => (\n          <ScheduleColumn key={i} date={date} timeslotLength={timeslotLength} />\n        ))}\n      </Row>\n    </Container>\n  );\n};\n\nconst AuthorizedTimeslots = compose(\n  withAuthorization(isLoggedIn),\n  withFirebase\n)(Timeslots);\n\nexport default ({ location }) => (\n  <Layout>\n    <AuthorizedTimeslots location={location} />\n  </Layout>\n);\n"],"sourceRoot":""}