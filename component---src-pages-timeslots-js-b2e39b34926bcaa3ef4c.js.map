{"version":3,"sources":["webpack:///./src/components/Timeslots/ScheduleColumn.js","webpack:///./src/components/Timeslots/InterviewerView.js","webpack:///./src/components/Timeslots/ApplicantView.js","webpack:///./src/pages/timeslots.js"],"names":["StyledSlot","styled","div","props","userSelected","hasOpening","orphanedApplicant","isBottom","isMiddle","isTop","css","siblingSelector","i","slotsPerTimeslot","ScheduleColumn","date","timeslotLength","userSelectedSlots","slotsWithOpening","orphanedApplicants","selectTimeslot","unselectTimeslot","startHour","endHour","useState","showToast","setShowToast","numSlots","slots","Array","from","_","dateFromSlot","slot","hours","Math","floor","minutes","Date","getFullYear","getMonth","getDate","Col","style","width","flex","position","Toast","onClose","show","delay","autohide","Body","className","color","toDateString","map","collection","isSelected","hasOwnProperty","includes","getPositions","SlotBase","children","onClick","offset","length","end","pos","validateSlot","handleSelect","key","formatTime","InterviewerView","_initFirebase","state","loading","error","settings","timeslots","timeslotOptions","showModal","unsub","loadSettings","a","firebase","generalSettings","get","doc","exists","data","timeslotDays","day","toDate","setState","onSnapshot","querySnapshot","listenerData","docs","time","id","filter","ts","Object","keys","interviewers","forEach","index","findIndex","timeslot","push","validIds","console","authUser","context","firestore","runTransaction","transaction","uid","name","update","swal","addNewTimeslot","add","selectTimeslotByDate","matchingTimeslots","getTime","cloneDeep","find","delete","timeslotsToSlots","timeslotStart","getHours","getMinutes","componentDidMount","this","componentDidUpdate","prevProps","componentWillUnmount","render","runningTransaction","Loader","flexdirection","timeslotsOpen","timeslotsOpenForApplicants","timeslotEnd","roles","applicant","ScrollableRow","sort","b","timeslotsForDay","Modal","onHide","Header","closeButton","Title","Card","minWidth","margin","cursor","values","join","Subtitle","Footer","Button","variant","Component","contextType","AuthUserContext","compose","withAuthorization","isRecruitmentTeam","withFirebase","TimeslotCard","selected","isApplicant","useContext","setTimeslots","selectedTimeslot","setSelectedTimeslot","setLoading","useEffect","TimeslotColumn","timeslotId","action","constructor","ref","Error","set","oldRef","oldDoc","oldTimeslot","newRef","newDoc","newTimeslot","timeslotSelected","firstName","split","email","catch","title","content","icon","timeslotUnselected","entries","TimeslotPage","Layout"],"mappings":"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","file":"component---src-pages-timeslots-js-b2e39b34926bcaa3ef4c.js","sourcesContent":["import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport Col from \"react-bootstrap/Col\";\nimport Toast from \"react-bootstrap/Toast\";\n\nimport { formatTime } from \"../../util/helper\";\n\nconst borderStyle = \"1px solid black\";\nconst StyledSlot = styled.div`\n  padding: 10px;\n  cursor: pointer;\n  display: flex;\n  justify-content: space-between;\n  background: ${(props) => {\n    if (props.userSelected) return \"green\";\n    else if (props.hasOpening) return \"blue\";\n    else if (props.orphanedApplicant) return \"red\";\n    else return \"white\";\n  }};\n  border-left: ${borderStyle};\n  border-right: ${borderStyle};\n  border-top: ${(props) =>\n    props.isBottom || props.isMiddle ? \"none\" : borderStyle};\n  border-bottom: ${(props) =>\n    props.isTop || props.isMiddle ? \"none\" : borderStyle};\n\n  ${(props) => {\n    if (props.userSelected) return;\n    let css = `\n      &:hover {\n        background: rgba(0, 128, 0, 0.5);\n        border-bottom: none;\n      }\n    `;\n    let siblingSelector = \" + div\";\n    for (let i = 1; i < props.slotsPerTimeslot; i++) {\n      css += `&:hover ${siblingSelector} {\n        background: rgba(0, 128, 0, 0.5);\n        border-top: none;\n        border-bottom: ${\n          i + 1 === props.slotsPerTimeslot ? borderStyle : \"none\"\n        };\n      }`;\n      siblingSelector += \" + div\";\n    }\n    return css;\n  }}\n`;\n\nconst ScheduleColumn = ({\n  date,\n  timeslotLength,\n  userSelectedSlots,\n  slotsWithOpening,\n  orphanedApplicants,\n  selectTimeslot,\n  unselectTimeslot,\n  startHour,\n  endHour,\n}) => {\n  const [showToast, setShowToast] = useState(false);\n\n  const numSlots = (endHour - startHour) * 4; // 15 min slots\n  const slots = Array.from(Array(numSlots), (_, i) => i * 15); // total 15 min slots in a day\n  const slotsPerTimeslot = timeslotLength / 15; // number of 15 min slots in an interview\n\n  // converts a start offset (slot) into a Date object\n  const dateFromSlot = (slot) => {\n    const hours = startHour + Math.floor(slot / 60);\n    const minutes = slot % 60;\n    return new Date(\n      date.getFullYear(),\n      date.getMonth(),\n      date.getDate(),\n      hours,\n      minutes\n    );\n  };\n\n  const handleSelect = (slot, i) => {\n    const validateSlot = (slot, i) => {\n      // if the timeslot will overflow past 10 PM, it's invalid\n      if (i + slotsPerTimeslot > slots.length) return false;\n\n      // if the timeslot will overflow into an already selected timeslot, it's invalid\n      const end = slot + timeslotLength;\n      for (let pos = slot; pos < end; pos += 15) {\n        if (userSelectedSlots.hasOwnProperty(pos)) return false;\n      }\n\n      // otherwise it's valid\n      return true;\n    };\n\n    if (userSelectedSlots.hasOwnProperty(slot)) {\n      // if slot is already selected, tell parent to remove the associated timeslot\n      const offset = userSelectedSlots[slot][0];\n      return unselectTimeslot(\n        new Date(\n          date.getFullYear(),\n          date.getMonth(),\n          date.getDate(),\n          startHour + Math.floor(offset / 60),\n          offset % 60\n        )\n      );\n    } else if (validateSlot(slot, i)) {\n      // if slot isn't selected and is valid, tell the parent to add the associated timeslot\n      const offset = slot;\n      return selectTimeslot(\n        new Date(\n          date.getFullYear(),\n          date.getMonth(),\n          date.getDate(),\n          startHour + Math.floor(offset / 60),\n          offset % 60\n        )\n      );\n    }\n\n    // otherwise show the user an error\n    setShowToast(true);\n  };\n\n  const renderSlot = (slot, i) => {\n    const getPositions = (slot, collection) => {\n      const isSelected = collection.hasOwnProperty(slot);\n      const isTop = isSelected && slot === collection[slot][0];\n      const isMiddle = isSelected && !collection[slot].includes(slot);\n      const isBottom = isSelected && slot === collection[slot][1];\n      return {\n        isSelected,\n        isTop,\n        isMiddle,\n        isBottom,\n      };\n    };\n\n    const { isSelected, isTop, isMiddle, isBottom } = getPositions(\n      slot,\n      userSelectedSlots\n    );\n\n    const SlotBase = ({ children }) => (\n      <StyledSlot\n        slotsPerTimeslot={slotsPerTimeslot}\n        hasOpening={slotsWithOpening.hasOwnProperty(slot)}\n        userSelected={userSelectedSlots.hasOwnProperty(slot)}\n        orphanedApplicant={orphanedApplicants.hasOwnProperty(slot)}\n        isTop={isTop}\n        isMiddle={isMiddle}\n        isBottom={isBottom}\n        onClick={() => handleSelect(slot, i)}\n      >\n        {children}\n      </StyledSlot>\n    );\n\n    if (isSelected) {\n      if (isTop) {\n        return (\n          <SlotBase key={slot}>\n            <span>{formatTime(dateFromSlot(slot))}</span>\n          </SlotBase>\n        );\n      } else if (isMiddle) {\n        return <SlotBase key={slot}>-</SlotBase>;\n      } else if (isBottom) {\n        return (\n          <SlotBase key={slot}>\n            <span>{formatTime(dateFromSlot(slot + 15))}</span>\n          </SlotBase>\n        );\n      }\n    }\n\n    return (\n      <SlotBase key={slot}>\n        <span>{formatTime(dateFromSlot(slot))}</span>\n        <span>-</span>\n        <span>{formatTime(dateFromSlot(slot + 15))}</span>\n      </SlotBase>\n    );\n  };\n\n  return (\n    <Col style={{ width: 300, flex: \"none\" }}>\n      <div style={{ position: \"fixed\" }}>\n        <Toast\n          onClose={() => setShowToast(false)}\n          show={showToast}\n          delay={3000}\n          autohide\n        >\n          <Toast.Body>\n            <strong className=\"mr-auto\" style={{ color: \"red\" }}>\n              Invalid option/timeslot conflict!\n            </strong>\n          </Toast.Body>\n        </Toast>\n      </div>\n\n      <strong>{date.toDateString()}</strong>\n      {slots.map(renderSlot)}\n    </Col>\n  );\n};\n\nexport default ScheduleColumn;\n","import React, { Component } from \"react\";\nimport { compose } from \"recompose\";\nimport swal from \"@sweetalert/with-react\";\nimport cloneDeep from \"lodash.clonedeep\";\n\nimport Button from \"react-bootstrap/Button\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Card from \"react-bootstrap/Card\";\n\nimport {\n  AuthUserContext,\n  withFirebase,\n  withAuthorization,\n} from \"upe-react-components\";\n\nimport { isRecruitmentTeam } from \"../../util/conditions\";\nimport { formatTime } from \"../../util/helper\";\nimport Loader from \"../Loader\";\nimport { Container } from \"../../styles/global\";\n\nimport ScrollableRow from \"./ScrollableRow\";\nimport ScheduleColumn from \"./ScheduleColumn\";\n\nclass InterviewerView extends Component {\n  _initFirebase = false;\n  state = {\n    loading: true,\n    error: null,\n    settings: null,\n    timeslots: {}, // TODO: this needs a better name\n    timeslotOptions: [],\n    showModal: false,\n  };\n  static contextType = AuthUserContext;\n  unsub = null;\n\n  componentDidMount() {\n    if (this.props.firebase && !this._initFirebase) this.loadSettings();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.firebase && !this._initFirebase) this.loadSettings();\n  }\n\n  componentWillUnmount() {\n    if (typeof this.unsub === \"function\") this.unsub();\n  }\n\n  loadSettings = async () => {\n    this._initFirebase = true;\n    const doc = await this.props.firebase.generalSettings().get();\n\n    if (!doc.exists) this.setState({ error: \"Failed to load timeslots!\" });\n    else {\n      const settings = doc.data();\n      const timeslots = {};\n      settings.timeslotDays = settings.timeslotDays.map((day) => {\n        const date = day.toDate();\n        timeslots[date.toDateString()] = [];\n        return date;\n      });\n      this.setState({ settings, timeslots }, () => {\n        this.unsub = this.props.firebase\n          .timeslots()\n          .onSnapshot((querySnapshot) => {\n            const { timeslots } = this.state;\n            const listenerData = querySnapshot.docs.map((doc) => {\n              return {\n                ...doc.data(),\n                time: doc.data().time.toDate(), // make sure to convert timestamp objects to Date objects\n                id: doc.id,\n              };\n            });\n\n            // add new data from listener\n            listenerData\n              .filter((ts) => Object.keys(ts.interviewers).length < 2)\n              .forEach((ts) => {\n                const day = ts.time.toDateString();\n\n                // if data for day exists, add to it, otherwise create new field\n                if (timeslots.hasOwnProperty(day)) {\n                  const index = timeslots[day].findIndex(\n                    (timeslot) => timeslot.id === ts.id // check if existing timeslot matches the update (ts)\n                  );\n\n                  // if timeslot exists, update the value, otherwise push it\n                  if (index > -1) {\n                    timeslots[day][index] = ts;\n                  } else {\n                    timeslots[day].push(ts);\n                  }\n                } else {\n                  timeslots[day] = [ts];\n                }\n              });\n\n            // remove timeslots that no longer exist\n            const validIds = listenerData.map((ts) => ts.id);\n            for (const day in timeslots)\n              timeslots[day] = timeslots[day].filter((ts) =>\n                validIds.includes(ts.id)\n              );\n\n            this.setState({\n              timeslots,\n              loading: false,\n            });\n          }, console.error);\n      });\n    }\n  };\n\n  // selects a timeslot by its id. if someone else fills the slot first, shows an error\n  selectTimeslot = async (ts) => {\n    const authUser = this.context;\n    const { firebase } = this.props;\n\n    try {\n      await firebase.firestore.runTransaction(async (transaction) => {\n        const doc = await transaction.get(firebase.timeslot(ts.id));\n        const timeslot = { ...doc.data() };\n        if (Object.keys(timeslot.interviewers).length < 2) {\n          timeslot.interviewers[authUser.uid] = authUser.name;\n          transaction.update(firebase.timeslot(ts.id), timeslot);\n        } else {\n          swal(\n            \"Uh oh!\",\n            \"Someone else has just registered this timeslot! Please select another.\",\n            \"error\"\n          );\n        }\n      });\n    } catch (e) {\n      console.error(\"Transaction failure!\", e);\n      swal(\n        \"Uh oh!\",\n        \"Something went wrong with saving your selections! Please refresh the page and try again!\",\n        \"error\"\n      );\n    }\n\n    this.setState({ showModal: false, timeslotOptions: [] });\n  };\n\n  addNewTimeslot = async (date) => {\n    const {\n      settings: { timeslotLength },\n    } = this.state;\n    const authUser = this.context;\n\n    const interviewers = {};\n    interviewers[authUser.uid] = authUser.name;\n    await this.props.firebase.timeslots().add({\n      time: date,\n      interviewers,\n      timeslotLength,\n    });\n    this.setState({ showModal: false });\n  };\n\n  selectTimeslotByDate = async (date) => {\n    const day = date.toDateString();\n    const { timeslots } = this.state;\n    const authUser = this.context;\n\n    // show timeslots that match time and have an opening\n    const matchingTimeslots = timeslots[day].filter(\n      (ts) =>\n        !ts.interviewers.hasOwnProperty(authUser.uid) &&\n        ts.time.getTime() === date.getTime()\n    );\n\n    // if no matching timeslots, push a new one. otherwise show options to user\n    if (matchingTimeslots.length === 0) await this.addNewTimeslot(date);\n    else this.setState({ showModal: true, timeslotOptions: matchingTimeslots });\n  };\n\n  unselectTimeslot = async (date) => {\n    const day = date.toDateString();\n    const { timeslots } = this.state;\n    const authUser = this.context;\n\n    // copy timeslot that this user is a part of, remove their uid, and update firebase\n    const timeslot = cloneDeep(\n      timeslots[day].find(\n        (ts) =>\n          ts.interviewers.hasOwnProperty(authUser.uid) &&\n          ts.time.getTime() === date.getTime()\n      )\n    );\n    const { id } = timeslot;\n    delete timeslot.id;\n    delete timeslot.interviewers[authUser.uid];\n    if (\n      Object.keys(timeslot.interviewers).length === 0 &&\n      !timeslot.hasOwnProperty(\"applicant\")\n    )\n      await this.props.firebase.timeslot(id).delete();\n    // TODO: notify admins if an timeslot with an applicant loses interviewers\n    else await this.props.firebase.timeslot(id).update(timeslot);\n  };\n\n  timeslotsToSlots = (timeslots) => {\n    const startHour = this.state.settings.timeslotStart;\n    const slots = {};\n    timeslots.forEach((ts) => {\n      const slot = (ts.time.getHours() - startHour) * 60 + ts.time.getMinutes();\n      const end = slot + this.state.settings.timeslotLength - 15;\n      for (let pos = slot; pos <= end; pos += 15) {\n        slots[pos] = [slot, end];\n      }\n    });\n    return slots;\n  };\n\n  render() {\n    const {\n      loading,\n      runningTransaction,\n      error,\n      timeslots,\n      showModal,\n      timeslotOptions,\n    } = this.state;\n\n    if (loading || runningTransaction) return <Loader />;\n    if (error)\n      return (\n        <Container flexdirection=\"column\">\n          <h1>{error}</h1>\n        </Container>\n      );\n\n    const {\n      timeslotsOpen,\n      timeslotsOpenForApplicants,\n      timeslotLength,\n      timeslotDays,\n      timeslotStart,\n      timeslotEnd,\n    } = this.state.settings;\n\n    const authUser = this.context;\n\n    if (!timeslotsOpen)\n      return (\n        <Container flexdirection=\"column\">\n          <h1>Timeslot selection is closed!</h1>\n        </Container>\n      );\n\n    if (authUser.roles.applicant && !timeslotsOpenForApplicants)\n      return (\n        <Container flexdirection=\"column\">\n          <h1>Timeslot selection isn't open yet!</h1>\n        </Container>\n      );\n\n    return (\n      <Container flexdirection=\"column\">\n        <h1>Interviewer Timeslot Selection</h1>\n        <ScrollableRow>\n          {timeslotDays\n            .sort((a, b) => a - b)\n            .map((date, i) => {\n              // TODO: explain this data structure in depth, good place for docz\n              // selectedSlots is an object/hashmap for performance reasons\n              const timeslotsForDay = timeslots[date.toDateString()];\n              const userSelectedSlots = timeslotsForDay\n                ? this.timeslotsToSlots(\n                    timeslotsForDay.filter((ts) =>\n                      ts.interviewers.hasOwnProperty(authUser.uid)\n                    )\n                  )\n                : {};\n              const slotsWithOpening = timeslotsForDay\n                ? this.timeslotsToSlots(\n                    timeslotsForDay.filter(\n                      (ts) =>\n                        !ts.interviewers.hasOwnProperty(authUser.uid) &&\n                        Object.keys(ts.interviewers).length === 1\n                    )\n                  )\n                : {};\n              const orphanedApplicants = timeslotsForDay\n                ? this.timeslotsToSlots(\n                    timeslotsForDay.filter(\n                      (ts) =>\n                        ts.hasOwnProperty(\"applicant\") &&\n                        Object.keys(ts.interviewers).length === 0\n                    )\n                  )\n                : {};\n              return (\n                <ScheduleColumn\n                  key={i}\n                  date={date}\n                  timeslotLength={timeslotLength}\n                  userSelectedSlots={userSelectedSlots}\n                  slotsWithOpening={slotsWithOpening}\n                  orphanedApplicants={orphanedApplicants}\n                  selectTimeslot={this.selectTimeslotByDate}\n                  unselectTimeslot={this.unselectTimeslot}\n                  startHour={timeslotStart}\n                  endHour={timeslotEnd}\n                />\n              );\n            })}\n        </ScrollableRow>\n\n        <Modal\n          show={showModal}\n          onHide={() => this.setState({ showModal: false })}\n        >\n          <Modal.Header closeButton>\n            <Modal.Title>Choose a timeslot</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <ScrollableRow>\n              {timeslotOptions.map((ts) => (\n                <Card\n                  key={ts.id}\n                  style={{\n                    minWidth: \"15rem\",\n                    margin: \"0 10px\",\n                    cursor: \"pointer\",\n                  }}\n                  onClick={() => this.selectTimeslot(ts)}\n                >\n                  <Card.Body>\n                    <Card.Title>\n                      Interviewer: {Object.values(ts.interviewers).join(\", \")}\n                    </Card.Title>\n                    {ts.applicant && (\n                      <Card.Subtitle className=\"mb-2 text-muted\">\n                        Applicant: {ts.applicant.name}\n                      </Card.Subtitle>\n                    )}\n                    <Card.Subtitle className=\"mb-2 text-muted\">\n                      {formatTime(ts.time)}\n                    </Card.Subtitle>\n                  </Card.Body>\n                </Card>\n              ))}\n\n              {timeslotOptions.length > 0 && (\n                <Card\n                  style={{\n                    minWidth: \"15rem\",\n                    margin: \"0 10px\",\n                    cursor: \"pointer\",\n                  }}\n                  onClick={() => this.addNewTimeslot(timeslotOptions[0].time)}\n                >\n                  <Card.Body>\n                    <Card.Title>Create new slot</Card.Title>\n                    <Card.Subtitle className=\"mb-2 text-muted\">\n                      {formatTime(timeslotOptions[0].time)}\n                    </Card.Subtitle>\n                  </Card.Body>\n                </Card>\n              )}\n            </ScrollableRow>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button\n              variant=\"secondary\"\n              onClick={() => this.setState({ showModal: false })}\n            >\n              Cancel\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </Container>\n    );\n  }\n}\n\nexport default compose(\n  withAuthorization(isRecruitmentTeam),\n  withFirebase\n)(InterviewerView);\n","import React, { useEffect, useContext, useState } from \"react\";\nimport { compose } from \"recompose\";\nimport styled from \"styled-components\";\nimport swal from \"@sweetalert/with-react\";\nimport cloneDeep from \"lodash.clonedeep\";\n\nimport Card from \"react-bootstrap/Card\";\nimport Col from \"react-bootstrap/Col\";\n\nimport {\n  AuthUserContext,\n  withFirebase,\n  withAuthorization,\n} from \"upe-react-components\";\n\nimport ScrollableRow from \"./ScrollableRow\";\nimport Loader from \"../Loader\";\nimport { Container } from \"../../styles/global\";\nimport { isApplicant } from \"../../util/conditions\";\nimport { formatTime } from \"../../util/helper\";\n\nconst TimeslotCard = styled(Card)`\n  width: 18rem;\n  margin: 10px;\n  cursor: pointer;\n  background: ${(props) => (props.selected ? \"#87fb87\" : \"white\")};\n\n  &:hover {\n    background: ${(props) => (props.selected ? \"#fb8787\" : \"#87fb87\")};\n  }\n`;\n\nconst ApplicantView = ({ firebase }) => {\n  const authUser = useContext(AuthUserContext);\n  const [timeslots, setTimeslots] = useState({});\n  const [selectedTimeslot, setSelectedTimeslot] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(\n    () => {\n      if (firebase) {\n        const unsub = firebase.timeslots().onSnapshot((querySnapshot) => {\n          const listenerData = querySnapshot.docs\n            .map((doc) => {\n              return {\n                ...doc.data(),\n                time: doc.data().time.toDate(), // make sure to convert timestamp objects to Date objects\n                id: doc.id,\n              };\n            })\n            .filter(\n              (ts) =>\n                ts?.applicant?.uid === authUser.uid ||\n                (!ts.hasOwnProperty(\"applicant\") &&\n                  Object.keys(ts.interviewers).length > 0)\n            ); // filter out ones that already have an applicant that isn't current user\n\n          setSelectedTimeslot(\n            listenerData.find((ts) => ts?.applicant?.uid === authUser.uid) || {}\n          );\n\n          // add new data from listener\n          listenerData.forEach((ts) => {\n            const day = ts.time.toDateString();\n\n            // if data for day exists, add to it, otherwise create new field\n            if (timeslots.hasOwnProperty(day)) {\n              const index = timeslots[day].findIndex(\n                (timeslot) => timeslot.id === ts.id // check if existing timeslot matches the update (ts)\n              );\n\n              // if timeslot exists, update the value, otherwise push it\n              if (index > -1) {\n                timeslots[day][index] = ts;\n              } else {\n                timeslots[day].push(ts);\n              }\n            } else {\n              timeslots[day] = [ts];\n            }\n          });\n\n          // remove timeslots that no longer exist\n          const validIds = listenerData.map((ts) => ts.id);\n          for (const day in timeslots)\n            timeslots[day] = timeslots[day].filter((ts) =>\n              validIds.includes(ts.id)\n            );\n\n          setTimeslots(cloneDeep(timeslots));\n        }, console.error);\n        setLoading(false);\n\n        return () => unsub();\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [firebase]\n  );\n\n  if (error)\n    return (\n      <Container flexdirection=\"column\">\n        <h1>{error}</h1>\n      </Container>\n    );\n\n  if (loading) return <Loader />;\n\n  const TimeslotColumn = ({ date, slots }) => {\n    const selectTimeslot = async (timeslot) => {\n      const timeslotId = timeslot.id;\n      let action = \"schedule\";\n\n      // TODO: add firebase rules to ensure that applicants dont change other peoples data\n      try {\n        await firebase.firestore.runTransaction(async (transaction) => {\n          if (\n            Object.keys(selectedTimeslot).length === 0 &&\n            selectedTimeslot.constructor === Object\n          ) {\n            const ref = firebase.timeslot(timeslotId);\n            const doc = await transaction.get(ref);\n            const timeslot = { ...doc.data() };\n            if (timeslot.hasOwnProperty(\"applicant\"))\n              throw new Error(\"Applicant already exists!\");\n            timeslot.applicant = {\n              name: authUser.name,\n              uid: authUser.uid,\n            };\n            transaction.update(ref, timeslot);\n            setSelectedTimeslot({ ...timeslot, id: doc.id });\n          } else {\n            if (timeslotId === selectedTimeslot.id) {\n              const ref = firebase.timeslot(timeslotId);\n              const doc = await transaction.get(ref);\n              const timeslot = { ...doc.data() };\n              if (timeslot.applicant?.uid !== authUser.uid)\n                throw new Error(\"Timeslot owned by other applicant!\");\n              delete timeslot.applicant;\n              transaction.set(ref, timeslot);\n              setSelectedTimeslot({});\n              action = \"unschedule\";\n            } else {\n              const oldRef = firebase.timeslot(selectedTimeslot.id);\n              const oldDoc = await transaction.get(oldRef);\n              const oldTimeslot = { ...oldDoc.data() };\n              if (oldTimeslot.applicant?.uid !== authUser.uid)\n                throw new Error(\"Timeslot owned by other applicant!\");\n              delete oldTimeslot.applicant;\n\n              const newRef = firebase.timeslot(timeslotId);\n              const newDoc = await transaction.get(newRef);\n              const newTimeslot = { ...newDoc.data() };\n              if (newTimeslot.hasOwnProperty(\"applicant\"))\n                throw new Error(\"Applicant already exists!\");\n              newTimeslot.applicant = {\n                name: authUser.name,\n                uid: authUser.uid,\n              };\n\n              transaction.set(oldRef, oldTimeslot);\n              transaction.update(newRef, newTimeslot);\n              setSelectedTimeslot({ ...newTimeslot, id: newDoc.id });\n            }\n          }\n        });\n      } catch (e) {\n        console.error(\"Transaction failure!\", e);\n        swal(\n          \"Uh oh!\",\n          \"Something went wrong with saving your selections! Please refresh the page and try again!\",\n          \"error\"\n        );\n      }\n\n      if (action === \"schedule\") {\n        await firebase.timeslotSelected({\n          firstName: authUser.name.split(\" \")[0],\n          email: authUser.email,\n          time: formatTime(timeslot.time),\n        })\n        .catch(error => console.error(error));\n        swal({\n          title: \"You're all set!\",\n          content: (\n            <span>\n              Your interview is scheduled for{\" \"}\n              <strong>\n                {formatTime(timeslot.time)}, {timeslot.time.toDateString()}\n              </strong>\n              ! A confirmation has also been sent to your email.\n            </span>\n          ),\n          icon: \"success\",\n        });\n      } else if (action === \"unschedule\") {\n        await firebase.timeslotUnselected({\n          firstName: authUser.name.split(\" \")[0],\n          email: authUser.email,\n        })\n        .catch(error => console.error(error));\n        swal(\n          \"Unscheduled!\",\n          `You have unscheduled your interview, and a confirmation has been sent to your email. If you'd still like to interview with UPE, make sure to select another timeslot!`,\n          \"success\"\n        );\n      }\n      // TODO send email\n    };\n\n    return (\n      <Col style={{ width: 300, flex: \"none\" }}>\n        <h1>{date}</h1>\n\n        {slots\n          .sort((a, b) => {\n            if (a.time.getTime() === b.time.getTime())\n              return a.id > b.id ? 1 : -1;\n            else return a.time > b.time ? 1 : -1;\n          })\n          .map((slot) => (\n            <TimeslotCard\n              key={slot.id}\n              onClick={() => selectTimeslot(slot)}\n              selected={slot.id === selectedTimeslot.id}\n            >\n              <Card.Body>\n                <Card.Title>{formatTime(slot.time)}</Card.Title>\n                <Card.Subtitle className=\"mb-2 text-muted\">\n                  {Object.values(slot.interviewers).join(\", \")}\n                </Card.Subtitle>\n                <Card.Subtitle className=\"mb-2 text-muted\">\n                  {slot.timeslotLength} mins\n                </Card.Subtitle>\n              </Card.Body>\n            </TimeslotCard>\n          ))}\n      </Col>\n    );\n  };\n\n  return (\n    <Container flexdirection=\"column\">\n      <h1>Applicant Timeslot Selection</h1>\n      <p>\n        The timeslots below show times, length, and interviewers. Don't select a\n        timeslot with interviewers that you know.\n      </p>\n      <ScrollableRow>\n        {Object.entries(timeslots)\n          .sort((a, b) => (new Date(a[0]) > new Date(b[0]) ? 1 : -1))\n          .map(([date, slots]) => (\n            <TimeslotColumn key={date} date={date} slots={slots} />\n          ))}\n      </ScrollableRow>\n    </Container>\n  );\n};\n\nexport default compose(\n  withAuthorization(isApplicant),\n  withFirebase\n)(ApplicantView);\n","import React, { useContext } from \"react\";\n\nimport { isRecruitmentTeam } from \"../util/conditions\";\nimport { AuthUserContext } from \"upe-react-components\";\nimport Layout from \"../components/Layout\";\nimport { InterviewerView, ApplicantView } from \"../components/Timeslots\";\n\nconst TimeslotPage = () => {\n  const authUser = useContext(AuthUserContext);\n  return isRecruitmentTeam(authUser) ? <InterviewerView /> : <ApplicantView />;\n};\n\nexport default () => (\n  <Layout>\n    <TimeslotPage />\n  </Layout>\n);\n"],"sourceRoot":""}